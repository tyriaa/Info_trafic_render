/**
 * Service pour r√©cup√©rer les donn√©es m√©t√©o via OpenWeatherMap
 */

const axios = require('axios');
const { formatShortFrenchTime } = require('./dateUtils');

// Configuration API OpenWeatherMap
const API_KEY = process.env.OPENWEATHER_API_KEY; 
const BASE_URL = 'https://api.openweathermap.org/data/2.5/weather';

// Coordonn√©es des villes
const CITY_COORDINATES = {
  paris: {
    name: 'Paris',
    lat: 48.8566,
    lon: 2.3522
  }
};

/**
 * R√©cup√®re les donn√©es m√©t√©o pour une ville
 * @param {string} city - Code de la ville ('paris', etc.)
 * @returns {Promise<Object>} - Donn√©es m√©t√©o format√©es
 */
async function getWeatherData(city = 'paris') {
  try {
    const cityData = CITY_COORDINATES[city.toLowerCase()];
    if (!cityData) {
      throw new Error(`Ville non support√©e: ${city}`);
    }

    const url = `${BASE_URL}?lat=${cityData.lat}&lon=${cityData.lon}&appid=${API_KEY}&units=metric&lang=fr`;
    
    const response = await axios.get(url);
    const data = response.data;

    return formatWeatherData(data, cityData.name);
  } catch (error) {
    console.error(`Erreur lors de la r√©cup√©ration m√©t√©o pour ${city}:`, error.message);
    return {
      cityName: CITY_COORDINATES[city.toLowerCase()]?.name || city,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Formate les donn√©es m√©t√©o pour l'affichage
 * @param {Object} rawData - Donn√©es brutes de l'API
 * @param {string} cityName - Nom de la ville
 * @returns {Object} - Donn√©es format√©es
 */
function formatWeatherData(rawData, cityName) {
  const weather = rawData.weather[0];
  const main = rawData.main;
  
  // Conversion des timestamps
  const sunrise = rawData.sys.sunrise 
    ? formatShortFrenchTime(new Date(rawData.sys.sunrise * 1000))
    : null;
  const sunset = rawData.sys.sunset 
    ? formatShortFrenchTime(new Date(rawData.sys.sunset * 1000))
    : null;

  // D√©terminer l'ic√¥ne et la couleur selon les conditions
  const weatherInfo = getWeatherDisplayInfo(weather, main.temp);

  return {
    cityName,
    temperature: {
      current: Math.round(main.temp),
      feelsLike: Math.round(main.feels_like),
      min: Math.round(main.temp_min),
      max: Math.round(main.temp_max)
    },
    conditions: {
      main: weather.main,
      description: weather.description,
      icon: weather.icon,
      displayIcon: weatherInfo.icon,
      color: weatherInfo.color
    },
    details: {
      humidity: main.humidity,
      pressure: main.pressure,
      visibility: rawData.visibility ? Math.round(rawData.visibility / 1000) : null
    },
    wind: {
      speed: rawData.wind?.speed ? Math.round(rawData.wind.speed * 3.6) : null, // Conversion m/s vers km/h
      direction: rawData.wind?.deg || null,
      gust: rawData.wind?.gust ? Math.round(rawData.wind.gust * 3.6) : null
    },
    precipitation: {
      rain1h: rawData.rain?.['1h'] || null,
      snow1h: rawData.snow?.['1h'] || null
    },
    sun: {
      sunrise,
      sunset
    },
    clouds: rawData.clouds?.all || null,
    timestamp: new Date().toISOString(),
    lastUpdate: formatShortFrenchTime()
  };
}

/**
 * D√©termine l'ic√¥ne et la couleur d'affichage selon les conditions m√©t√©o
 * @param {Object} weather - Donn√©es m√©t√©o
 * @param {number} temp - Temp√©rature
 * @returns {Object} - Ic√¥ne et couleur pour l'affichage
 */
function getWeatherDisplayInfo(weather, temp) {
  const condition = weather.main.toLowerCase();
  const description = weather.description.toLowerCase();
  
  // Ic√¥nes et couleurs selon les conditions
  if (condition.includes('clear')) {
    return { icon: '‚òÄÔ∏è', color: '#FFD700' }; // Soleil
  } else if (condition.includes('cloud')) {
    if (description.includes('few') || description.includes('scattered')) {
      return { icon: '‚õÖ', color: '#87CEEB' }; // Partiellement nuageux
    }
    return { icon: '‚òÅÔ∏è', color: '#B0C4DE' }; // Nuageux
  } else if (condition.includes('rain')) {
    if (description.includes('light')) {
      return { icon: 'üå¶Ô∏è', color: '#4682B4' }; // Pluie l√©g√®re
    } else if (description.includes('heavy')) {
      return { icon: 'üåßÔ∏è', color: '#191970' }; // Pluie forte
    }
    return { icon: 'üåßÔ∏è', color: '#4169E1' }; // Pluie
  } else if (condition.includes('snow')) {
    return { icon: '‚ùÑÔ∏è', color: '#E6E6FA' }; // Neige
  } else if (condition.includes('thunderstorm')) {
    return { icon: '‚õàÔ∏è', color: '#483D8B' }; // Orage
  } else if (condition.includes('mist') || condition.includes('fog')) {
    return { icon: 'üå´Ô∏è', color: '#D3D3D3' }; // Brouillard
  }
  
  // Par d√©faut selon la temp√©rature
  if (temp > 25) {
    return { icon: 'üå°Ô∏è', color: '#FF6347' }; // Chaud
  } else if (temp < 5) {
    return { icon: 'ü•∂', color: '#B0E0E6' }; // Froid
  }
  
  return { icon: 'üå§Ô∏è', color: '#87CEEB' }; // Par d√©faut
}

/**
 * R√©cup√®re les pr√©visions m√©t√©o 5 jours pour une ville
 * @param {string} city - Code de la ville ('paris', etc.)
 * @returns {Promise<Object>} - Pr√©visions m√©t√©o format√©es
 */
async function getWeatherForecast(city = 'paris') {
  try {
    const cityData = CITY_COORDINATES[city.toLowerCase()];
    if (!cityData) {
      throw new Error(`Ville non support√©e: ${city}`);
    }

    const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${cityData.lat}&lon=${cityData.lon}&appid=${API_KEY}&units=metric&lang=fr`;
    
    const response = await axios.get(url);
    const data = response.data;

    return formatForecastData(data, cityData.name);
  } catch (error) {
    console.error(`Erreur lors de la r√©cup√©ration des pr√©visions pour ${city}:`, error.message);
    return {
      cityName: CITY_COORDINATES[city.toLowerCase()]?.name || city,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Formate les donn√©es de pr√©visions pour l'affichage
 * @param {Object} rawData - Donn√©es brutes de l'API forecast
 * @param {string} cityName - Nom de la ville
 * @returns {Object} - Pr√©visions format√©es
 */
function formatForecastData(rawData, cityName) {
  // Grouper les pr√©visions par jour
  const forecastsByDay = {};
  const next24Hours = [];
  
  rawData.list.forEach((forecast, index) => {
    const date = new Date(forecast.dt * 1000);
    const dateKey = date.toISOString().split('T')[0]; // YYYY-MM-DD
    
    // Stocker les 8 premi√®res pr√©visions pour les 24 prochaines heures
    if (index < 8) {
      next24Hours.push(formatSingleForecast(forecast));
    }
    
    // Grouper par jour
    if (!forecastsByDay[dateKey]) {
      forecastsByDay[dateKey] = [];
    }
    
    forecastsByDay[dateKey].push(formatSingleForecast(forecast));
  });

  // Cr√©er un r√©sum√© par jour avec min/max
  const dailySummary = Object.entries(forecastsByDay).map(([date, forecasts]) => {
    const temps = forecasts.map(f => f.temperature);
    const conditions = forecasts.map(f => f.conditions);
    
    // Trouver la condition la plus repr√©sentative (celle du milieu de journ√©e)
    const middayForecast = forecasts.find(f => {
      const hour = new Date(f.datetime).getHours();
      return hour >= 12 && hour <= 15;
    }) || forecasts[Math.floor(forecasts.length / 2)];
    
    return {
      date,
      dateFormatted: formatDateFrench(date),
      dayName: getDayName(date),
      temperature: {
        min: Math.round(Math.min(...temps)),
        max: Math.round(Math.max(...temps))
      },
      conditions: middayForecast.conditions,
      forecasts: forecasts
    };
  });

  return {
    cityName,
    current: rawData.list[0] ? formatSingleForecast(rawData.list[0]) : null,
    next24Hours,
    dailySummary: dailySummary.slice(0, 5), // Limiter √† 5 jours
    totalForecasts: rawData.cnt,
    timestamp: new Date().toISOString(),
    lastUpdate: formatShortFrenchTime()
  };
}

/**
 * Formate une pr√©vision individuelle
 * @param {Object} forecast - Pr√©vision individuelle de l'API
 * @returns {Object} - Pr√©vision format√©e
 */
function formatSingleForecast(forecast) {
  const weather = forecast.weather[0];
  const weatherInfo = getWeatherDisplayInfo(weather, forecast.main.temp);
  
  return {
    datetime: new Date(forecast.dt * 1000).toISOString(),
    datetimeFormatted: formatShortFrenchTime(new Date(forecast.dt * 1000)),
    temperature: Math.round(forecast.main.temp),
    feelsLike: Math.round(forecast.main.feels_like),
    conditions: {
      main: weather.main,
      description: weather.description,
      icon: weather.icon,
      displayIcon: weatherInfo.icon,
      color: weatherInfo.color
    },
    details: {
      humidity: forecast.main.humidity,
      pressure: forecast.main.pressure
    },
    wind: {
      speed: forecast.wind?.speed ? Math.round(forecast.wind.speed * 3.6) : null,
      direction: forecast.wind?.deg || null
    },
    precipitation: {
      rain3h: forecast.rain?.['3h'] || 0,
      snow3h: forecast.snow?.['3h'] || 0
    },
    clouds: forecast.clouds?.all || 0
  };
}

/**
 * Formate une date en fran√ßais
 * @param {string} dateString - Date au format YYYY-MM-DD
 * @returns {string} - Date format√©e
 */
function formatDateFrench(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('fr-FR', {
    day: 'numeric',
    month: 'long'
  });
}

/**
 * Obtient le nom du jour en fran√ßais
 * @param {string} dateString - Date au format YYYY-MM-DD
 * @returns {string} - Nom du jour
 */
function getDayName(dateString) {
  const date = new Date(dateString);
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(today.getDate() + 1);
  
  if (date.toDateString() === today.toDateString()) {
    return "Aujourd'hui";
  } else if (date.toDateString() === tomorrow.toDateString()) {
    return "Demain";
  } else {
    return date.toLocaleDateString('fr-FR', { weekday: 'long' });
  }
}

/**
 * Obtient un r√©sum√© m√©t√©o court pour l'affichage
 * @param {string} city - Code de la ville
 * @returns {Promise<string>} - R√©sum√© m√©t√©o
 */
async function getWeatherSummary(city = 'paris') {
  try {
    const weather = await getWeatherData(city);
    
    if (weather.error) {
      return `M√©t√©o indisponible`;
    }
    
    const temp = weather.temperature.current;
    const desc = weather.conditions.description;
    const icon = weather.conditions.displayIcon;
    
    return `${icon} ${temp}¬∞C, ${desc}`;
  } catch (error) {
    return `M√©t√©o indisponible`;
  }
}

module.exports = {
  getWeatherData,
  getWeatherForecast,
  getWeatherSummary,
  formatWeatherData,
  formatForecastData
};
